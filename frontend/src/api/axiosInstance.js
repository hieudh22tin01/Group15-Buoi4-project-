import axios from "axios";

const axiosInstance = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  withCredentials: true,
});

// üß† Interceptor th√™m token v√†o m·ªói request
axiosInstance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");

    console.log("üîç Token ƒëang g·ª≠i l√™n backend:", token);

    if (token && token !== "undefined") {
      config.headers.Authorization = `Bearer ${token}`;
    } else {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ token h·ª£p l·ªá trong localStorage!");
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// üß© Interceptor x·ª≠ l√Ω khi token h·∫øt h·∫°n (HTTP 403 ho·∫∑c 401)
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu l·ªói 403/401, th·ª≠ refresh token
    if ((error.response?.status === 401 || error.response?.status === 403) && !originalRequest._retry) {
      originalRequest._retry = true;
      const refreshToken = localStorage.getItem("refreshToken");

      if (!refreshToken || refreshToken === "undefined") {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ refreshToken, c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i.");
        window.location.href = "/login";
        return Promise.reject(error);
      }

      try {
        const res = await axios.post("http://localhost:5000/api/auth/refresh", {
          refreshToken,
        });

        localStorage.setItem("token", res.data.accessToken);
        console.log("üîÅ Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi:", res.data.accessToken);

        // G·ª≠i l·∫°i request c≈© v·ªõi token m·ªõi
        originalRequest.headers.Authorization = `Bearer ${res.data.accessToken}`;
        return axiosInstance(originalRequest);
      } catch (refreshErr) {
        console.error("‚ùå Refresh token th·∫•t b·∫°i:", refreshErr);
        window.location.href = "/login";
      }
    }

    return Promise.reject(error);
  }
);

export default axiosInstance;
